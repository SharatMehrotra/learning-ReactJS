{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setdata] = useState(null);\n  const [isPending, setisPending] = useState(true);\n  const [error, seterror] = useState(null);\n  useEffect(() => {\n    const abortCont = new AbortController();\n    setTimeout(() => {\n      fetch(url, {\n        signal: abortCont.signal\n      }).then(response => {\n        if (!response.ok) {\n          throw Error('could not fetch data from server');\n        }\n\n        return response.json();\n      }).then(data => {\n        setdata(data);\n        setisPending(false);\n        seterror(null);\n      }).catch(err => {\n        seterror(err.message);\n        setisPending(false);\n      });\n    }, 1000);\n    return () => {\n      abortCont.abort();\n    };\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"FVVKKlb326GSxHbzDS97cVbofRs=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/home/sharat/Documents/SHARAT/Github/learning-ReactJS/sharat-blog/src/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setdata","isPending","setisPending","error","seterror","abortCont","AbortController","setTimeout","fetch","signal","then","response","ok","Error","json","catch","err","message","abort"],"mappings":";;AAAA,SAAQA,QAAR,EAAiBC,SAAjB,QAAiC,OAAjC;;AACA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMS,SAAS,GAAG,IAAIC,eAAJ,EAAlB;AAEAC,IAAAA,UAAU,CAAC,MAAI;AACXC,MAAAA,KAAK,CAACV,GAAD,EAAK;AAACW,QAAAA,MAAM,EAACJ,SAAS,CAACI;AAAlB,OAAL,CAAL,CACCC,IADD,CACOC,QAAD,IAAc;AAChB,YAAG,CAACA,QAAQ,CAACC,EAAb,EAAgB;AACZ,gBAAMC,KAAK,CAAC,kCAAD,CAAX;AACH;;AACD,eAAOF,QAAQ,CAACG,IAAT,EAAP;AACH,OAND,EAOCJ,IAPD,CAOOX,IAAD,IAAS;AACXC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,OAXD,EAYCW,KAZD,CAYQC,GAAD,IAAQ;AACXZ,QAAAA,QAAQ,CAACY,GAAG,CAACC,OAAL,CAAR;AACAf,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,OAfD;AAgBH,KAjBS,EAiBR,IAjBQ,CAAV;AAkBA,WAAO,MAAI;AACPG,MAAAA,SAAS,CAACa,KAAV;AACH,KAFD;AAGH,GAzBQ,EAyBP,CAACpB,GAAD,CAzBO,CAAT;AA2BA,SAAO;AAACC,IAAAA,IAAD;AAAME,IAAAA,SAAN;AAAgBE,IAAAA;AAAhB,GAAP;AACH,CAhCD;;GAAMN,Q;;AAkCN,eAAeA,QAAf","sourcesContent":["import {useState,useEffect} from 'react';\nconst useFetch = (url) => {\n    const [data, setdata] = useState(null);\n    const [isPending, setisPending] = useState(true);\n    const [error, seterror] = useState(null);\n    useEffect(() => {\n\n        const abortCont = new AbortController();\n\n        setTimeout(()=>{\n            fetch(url,{signal:abortCont.signal})\n            .then((response) => {\n                if(!response.ok){\n                    throw Error('could not fetch data from server')\n                }\n                return response.json()\n            })\n            .then((data) =>{\n                setdata(data);\n                setisPending(false);\n                seterror(null);\n            })\n            .catch((err) =>{\n                seterror(err.message);\n                setisPending(false);\n            })\n        },1000);\n        return ()=>{\n            abortCont.abort();\n        }\n    },[url]);\n\n    return {data,isPending,error}\n}\n\nexport default useFetch"]},"metadata":{},"sourceType":"module"}